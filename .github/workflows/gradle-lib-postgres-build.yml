name: gradle-lib-postgres-build

on:
  workflow_call:
    inputs:
      java-distribution:
        type: string
        description: Name of Java JDK distribution to use
        required: false
        default: temurin
      java-version:
        type: number
        description: Version of Java JDK to use
        required: false
        default: 17
      postgres-admin-db-uri:
        type: string
        description: Postgres admin database connection URI
        required: true
      postgres-build-db-uri:
        type: string
        description: Postgres database connection URI for performing builds
        required: true
      run-gradle-validation:
        type: boolean
        description: Value indicating if Gradle validation step should run
        required: true
    secrets:
      fossa-api-key:
        description: FOSSA licensing scan API key
        required: true
      postgres-admin-password:
        description: Postgres admin password
        required: true
      postgres-build-db-svc-name:
        description: Postgres database service account name for performing builds
        required: true
      postgres-build-db-svc-password:
        description: Postgres database service account password for performing builds
        required: true

jobs:
  gradle-lib-postgres-build:
    name: Gradle Library with Postgres Build
    runs-on: ubuntu-latest
    if: ${{ github.event.head_commit.message != 'Create release' }}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{ secrets.postgres-admin-password }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1

      - name: Validate Gradle Wrapper
        if: ${{ inputs.run-gradle-validation == true }}
        uses: gradle/wrapper-validation-action@v2.1.2

      - name: Setup Java
        uses: actions/setup-java@v4.2.1
        with:
          java-version: ${{ inputs.java-version }}
          distribution: ${{ inputs.java-distribution }}

      - name: Create Postgres Database and Service Account
        run: |
          psql -c "CREATE USER ${POSTGRES_DB_USER} WITH ENCRYPTED PASSWORD '${POSTGRES_DB_PASSWORD}';" ${POSTGRES_DB_URI}
          psql -f migrations/create_database.sql ${POSTGRES_DB_URI}
        env:
          POSTGRES_DB_URI: ${{ inputs.postgres-admin-db-uri }}
          POSTGRES_DB_USER: ${{ secrets.postgres-build-db-svc-name }}
          POSTGRES_DB_PASSWORD: ${{ secrets.postgres-build-db-svc-password }}

      - name: Database Migration
        uses: burrunan/gradle-cache-action@v1
        with:
          arguments: flywayMigrate
          gradle-version: wrapper
        env:
          FLYWAY_URL: ${{ inputs.postgres-build-db-uri }}
          FLYWAY_USER: ${{ secrets.postgres-build-db-svc-name }}
          FLYWAY_PASSWORD: ${{ secrets.postgres-build-db-svc-password }}

      - name: Build
        uses: burrunan/gradle-cache-action@v1
        with:
          arguments: clean build
          gradle-version: wrapper
        env:
          SPRING_DATASOURCE_URL: ${{ inputs.postgres-build-db-uri }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.postgres-build-db-svc-name }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.postgres-build-db-svc-password }}

      - name: Set Package Name
        run: |
          group=$(awk '/group/{print $NF; exit}' build.gradle.kts | sed s/\'//g | sed s/\"//g)
          name=$(awk '/rootProject.name/{print $NF; exit}' settings.gradle.kts | sed s/\'//g | sed s/\"//g)
          echo "PACKAGE_NAME=${group}.${name}" >> $GITHUB_ENV

      - name: Codestyle
        uses: fabiocapasso93/gha-kotlin-linter@v1.1

      - name: Coverage
        uses: codecov/codecov-action@v4.1.0
        with:
          file: ./build/reports/jacoco/test/jacocoTestReport.xml
          verbose: true

      - name: FOSSA
        uses: fossas/fossa-action@v1.3.3
        with:
          api-key: ${{ secrets.fossa-api-key }}

      - name: Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: ${{ env.PACKAGE_NAME }}
          path: .
          format: HTML
          out: reports/dependency-check
          args: >
            --failOnCVSS 7
            --enableRetired
        env:
          JAVA_HOME: /opt/jdk

      - name: Publish Dependency Check Results
        uses: actions/upload-artifact@master
        with:
          name: Dependency Check Report
          path: ${{ github.workspace }}/reports/dependency-check
